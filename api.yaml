openapi: 3.0.0
info:
  title: Demo Project with Swagger
  description: This is a practice project to learn swagger for our Smart CBT project.
  version: 0.0.1
  contact:
    email: shiam.chowdhury@bjitgroup.com


servers:
  - url: http://localhost:4000/
    description: Local server
  - url: https://bjitgroup.com
    description: This is my company server

schemes: [http, https]

paths:
  /any:
    get:
      summary: Returning a string
      description: just returning a fake string
      responses:
        200:
          description: this is success message
        404: 
          description: not found
        500: 
          description: Internal server error

#Returns a User
  /user:
    get:
      summary: Returns a list of users.
      description: People Who are already registered
      responses:
        200:    # status code
          description: Successul Response
          schema: 
            type: object
            properties:
              id:
                type: integer
              name:
                type: string

#Returns an array of Users
  /users:
    get:
      summary: Returns a list of users.
      description: People Who are already registered
      responses:
        200:    # status code
          description: Successul Response
          schema: 
            type: array
            items: 
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string


#Get Request with path id
  /users/{userId}:
    get:
      summary: Returns a user by ID.
      description: Returns the Specific User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
      responses: 
        '200':
          description: OK
          schema:
            type: object
            example: {name: syed}

#Post json/body & Body required
  # /create:
  #   post:
  #     summary: Adds a new user
  #     produces:
  #       - application/json
  #     consumes:
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         schema:
  #           type: object
  #           required:
  #             - name
  #             - id
  #           properties:
  #             id:
  #               type: integer
  #             name:
  #               type: string
  #     responses:
  #       '200':
  #         description: OK

# $ref: "#/components/schemas/User"
#Defining Body Reference
  /create:
    post:
      summary: Adds a new user
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Created


#Query
#Get Query
  /usersQuery:
    get:
      summary: Returns a user by ID.
      description: Returns the Specific User
      parameters:
        - in: query
          name: id
          type: integer
          enum: [1, 2]
          required: true
        # - in: query
        #   name: id
        #   type: integer
        #   enum: [1, 2]
        #   required: true
      responses: 
        '200':
          description: OK
          schema:
            type: object
            example: {name: syed,id: 21}



#File Upload Multiform Data
  /upload:
    post:
      tags:
        - Upload
      summary: Upload Video/Image for Inferring
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: The file to upload.
        # - in: formData
        #   name: app
        #   type: string
        #   required: true
        #   description: Name of the model.
        # - in: formData
        #   name: id
        #   type: string
        #   required: true
        #   description: Some random Id.
      responses:
        200:
          description: Successful Response
        400:
          description: User Error
        500:
          description: Internal Server Error


#In Headers
  /string:
    get:
      summary: Checks if the server is alive
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: Successful Response
        400:
          description: User Error
        500:
          description: Internal Server Error

#Cokies
  # /ping:
  #   get:
  #     summary: Checks if the server is alive
  #     parameters:
  #       - in: cookie
  #         name: debug
  #         schema:
  #           type: integer
  #           enum: [0, 1]
  #           default: 0
  #       - in: cookie
  #         name: csrftoken
  #         schema:
  #           type: string


components:
  schemas:
    User:
      type: object
      required:
        - name
        - id
      properties:
        id:
          type: integer
        name:
          type: string
